AWSTemplateFormatVersion: 2010-09-09
Description: |
  The networking and cluster configuration to support fargate containers
  - ECS Fargate Cluster
  - Application Load Balanacer (ALB)
    - ipv4 only
    - internet facing
    - certificate attached from Amazon Certification Manager (ACM)
  - ALB Security Group
  - HTTPS Listerner
    - send naked domain to frontend Target Group
    - send api. subdomain to backend Target Group
  - HTTP Listerner
    - redirects to HTTPS Listerner
  - Backend Target Group
  - Frontend Target Group

# Parameters:
Resources:
  FargateCluster: # LogicalName
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !sub "${AWS::StackName} Fargate Cluster"
      CapacityProviders: 
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
        - Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: cruddur

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !sub "${AWS::StackName} ALB"
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.preserve_host_header.enabled
          Value: false
        - Key: deletion_protection.enabled
          Value: true
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: false
  
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTG
      LoadBalancerArn: !Ref ALB
      
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTPS
      LoadBalancerArn: !Ref ALB
      DefaultActions:
        - Type: redirect
          RedirectConfig:
              Protocol: "HTTPS"
              Port: 443
              Host: "#{host}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: "HTTP_301"
  
  ApiALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              api.thebanana.click
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTG
      ListenerArn: 
      Priority: 1
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !sub "${AWS::StackName} ALBSG"
      GroupDescription: Public Facing SG for our cruddur alb
      SecurityGroupEgress: 
        - Egress
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: Internet HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: Internet HTTP

  BackendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
      Port:
      HealthCheckEnabled: Boolean
      HealthCheckIntervalSeconds: Integer
      HealthCheckPath: String
      HealthCheckPort: String
      HealthCheckProtocol: String
      HealthCheckTimeoutSeconds: Integer
      HealthyThresholdCount: Integer
      IpAddressType: String
      Matcher: 
        Matcher
      Protocol: String
      ProtocolVersion: String
      Tags: 
        - Tag
      TargetGroupAttributes: 
        - TargetGroupAttribute
      Targets: 
        - TargetDescription
      TargetType: String
      UnhealthyThresholdCount: Integer
      VpcId: String
  FrontendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:

# Outputs:
  